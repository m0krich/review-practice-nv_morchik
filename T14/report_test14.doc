Задача 3: Простая проверка лицензии
  
     import os #Импортируется модуль os — стандартный модуль Python, который предоставляет функции для работы с операционной системой, например, проверки наличия файла. 
    
     def check_license(): #Объявление функции check_license(), которая будет отвечать за проверку наличия и содержания файла лицензии. 
         if not os.path.exists("license.key"): #Проверяется, существует ли файл license.key. Если его нет — выполняется следующий блок. 
            print("Файл лицензии не найден!") #Выводится сообщение о том, что файл лицензии отсутствует. 
             return False #Функция возвращает значение False, сигнализируя об ошибке лицензирования. 
        
         with open("license.key") as f: #Открывается файл license.key для чтения. Оператор with гарантирует корректное закрытие файла после использования.
             key = f.read().strip() #Содержимое файла читается и сохраняется в переменную key. Метод .strip() удаляет лишние пробелы и символы новой строки. 
             return key == "ABCD-1234-EFGH" #Функция возвращает True, если ключ совпадает с ожидаемым, иначе — False. 
     
     def main(): #Объявление основной функции программы — main(). 
         if not check_license(): #Вызывается функция check_license(). Если она возвращает False, то выполнится следующий блок. 
             print("Программа заблокирована!") #Сообщение о блокировке программы при неверной или отсутствующей лицензии. 
             return #Завершение функции main() — программа не запускается дальше. 
         
         print("Программа запущена!") #Сообщение о том, что лицензия прошла проверку успешно и программа запущена. 
         # Основной код #Комментарий, указывающий место для основного функционала программы. 
     
     if __name__ == "__main__": #Условие, которое проверяет, запущен ли скрипт напрямую (а не импортирован как модуль). 
         main() #Вызов главной функции main() при прямом запуске файла. 

Проверка программы на трёх случаях
1. Нет файла лицензии
    • Результат:
    Файл лицензии не найден!
    Программа заблокирована!

2. Есть файл лицензии с правильным ключом (ABCD-1234-EFGH)
    Результат:
    Программа запущена!

3.Лицензия не соответствует (файл есть, но ключ неверный)
    • Результат:
      Программа заблокирована!

Задача 4: Ответы на вопросы по защите программного обеспечения

1. Каковы основные цели защиты программного обеспечения от исследования?
Основные цели:
    • Предотвращение несанкционированного доступа к исходному коду.
    • Защита интеллектуальной собственности и бизнес-логики.
    • Предотвращение взлома, копирования и обратной разработки.
    • Сохранение конфиденциальности данных и алгоритмов.

2. Почему защита программного обеспечения важна для бизнеса?
Важна, потому что:
    • Защищает инвестиции в разработку.
    • Поддерживает конкурентоспособность продукта.
    • Предотвращает утечки данных и финансовые потери.
    • Укрепляет доверие клиентов и партнеров.

3. Какие риски могут возникнуть при отсутствии защиты программ?
Риски:
    • Кража кода и создание подделок.
    • Раскрытие секретных алгоритмов и логики.
    • Возможность манипуляций с данными и безопасностью.
    • Повреждение репутации компании.

4. Что такое реверс-инжиниринг и как он может угрожать безопасности программ?
Реверс-инжиниринг — это процесс анализа готового ПО для восстановления его архитектуры, дизайна и исходного кода.
Угрозы:
    • Получение доступа к защищённой логике.
    • Поиск уязвимостей.
    • Создание пиратских копий.
    • Взлом защиты авторизации и лицензий.

5. Какие основные методы реверс-инжиниринга существуют?
Методы:
    • Дизассемблирование (преобразование машинного кода в ассемблер).
    • Декомпиляция (обратное преобразование байт-кода/машинного кода в высокоуровневый язык).
    • Отладка и анализ динамического поведения программы.
    • Анализ сетевых запросов и трафика.
    • Использование специализированных инструментов (IDA Pro, Ghidra, OllyDbg и др.).

6. Какие уязвимости могут быть выявлены в недостаточно защищенных программах?
Уязвимости:
    • Наличие хардкоженых паролей или API-ключей.
    • Прямые вызовы критических функций без проверок.
    • Простая структура проверок лицензий.
    • Незашифрованные данные.
    • Легко обходимые антиотладочные механизмы.

7. Какие методы защиты программного обеспечения наиболее распространены?
Распространённые методы:
    • Обфускация кода.
    • Шифрование частей кода и данных.
    • Лицензирование и активация.
    • Антиотладчики и анти-анализ.
    • Использование обёрток и виртуальных машин.
    • Динамическая загрузка кода.

8. Как работает шифрование данных, и какие есть его основные виды?
Шифрование — процесс преобразования информации в нечитаемый формат для предотвращения несанкционированного доступа.
Виды:
    • Симметричное шифрование (AES, DES): один ключ для шифрования и расшифрования.
    • Асимметричное шифрование (RSA, ECC): используются открытый и закрытый ключи.
    • Хэширование (SHA, MD5): одностороннее преобразование, используется для проверки целостности данных.

9. Что такое обфускация кода и как она помогает защитить программы?
Обфускация кода — это процесс изменения внешнего вида кода таким образом, чтобы он оставался функционально эквивалентным, но был сложным для понимания человеком.
Как помогает:
    • Затрудняет анализ и чтение кода.
    • Скрывает логику работы.
    • Усложняет реверс-инжиниринг.

10. Какие инструменты можно использовать для обфускации кода?
Инструменты:
    • PyArmor , Cython (для Python)
    • ProGuard , DexGuard (для Java/Android)
    • Dotfuscator (для .NET)
    • JavaScript Obfuscator
    • UPX (упаковщик исполняемых файлов)

11. Как можно использовать лицензирование для защиты программного обеспечения?
Лицензирование позволяет:
    • Контролировать использование программы только зарегистрированными пользователями.
    • Ограничивать срок действия или количество установок.
    • Проверять подлинность ключа перед запуском.
    • Блокировать нелицензированное ПО.

12. Какие типы лицензий наиболее эффективны для защиты программ?
Эффективные типы:
    • Персональная лицензия (привязка к пользователю).
    • Лицензия с активацией через интернет .
    • Лицензия с привязкой к аппаратным параметрам устройства .
    • Подписка (subscription) — требует регулярной проверки.
    • Онлайн-валидация (через сервер разработчика).

13. Как тестировать защитные механизмы программы на уязвимости?
Методы тестирования:
    • Ручной анализ кода и структуры.
    • Использование дизассемблеров и отладчиков.
    • Тестирование на обход лицензионной проверки.
    • Попытки извлечения данных из памяти.
    • Использование автоматизированных инструментов (например, IDA Pro, Binary Ninja, Frida).

14. В чем заключается важность проведения регулярных аудитов безопасности программ?
Важность:
    • Обнаружение новых уязвимостей.
    • Повышение уровня доверия со стороны клиентов.
    • Соответствие нормативным требованиям (GDPR, HIPAA и т.д.).
    • Предотвращение возможных инцидентов до их реализации.

15. Как автоматизированное тестирование может помочь в оценке защиты программ?
Помощь:
    • Обнаружение уязвимостей на ранних этапах.
    • Автоматизация рутинных задач по тестированию.
    • Повторяемость и масштабируемость проверок.
    • Интеграция в CI/CD для непрерывного контроля.

16. Приведите примеры успешных практик защиты программного обеспечения
Примеры:
    • Adobe — переход на подписку Creative Cloud с онлайн-валидацией.
    • Steam — защита игр через DRM (Digital Rights Management).
    • Microsoft Office 365 — комбинация облачного доступа и лицензирования.
    • iOS App Store — строгий контроль приложений и их безопасности.

17. Как можно адаптировать методы защиты в зависимости от типа программного обеспечения?
Примеры адаптации:
    • Для мобильных приложений — обфускация + DRM.
    • Для веб-приложений — шифрование трафика + WAF.
    • Для desktop-программ — обфускация + антиотладчики.
    • Для IoT — минимальный набор функций + харденинг.

18. Какие известные случаи взлома программного обеспечения демонстрируют недостатки защиты?
Примеры:
    • Sony PlayStation 3 — взломаны RSA-ключи.
    • Windows — многочисленные эксплоиты в необновляемых версиях.
    • PayPal SDK — утечка данных из-за неправильной реализации.
    • WannaCry — массовый ransomware из-за уязвимости EternalBlue.

19. Как современные технологии, такие как машинное обучение, могут улучшить защиту программ?
ML может:
    • Обнаруживать аномалии в поведении программы.
    • Анализировать паттерны реверса и обнаруживать попытки взлома.
    • Улучшать детекцию вредоносного ПО.
    • Автоматически обнаруживать уязвимости в коде.

20. Какие существуют юридические аспекты защиты программного обеспечения?
Юридические средства:
    • Авторское право.
    • Лицензии (EULA — end-user license agreement).
    • Патенты на уникальные алгоритмы и технологии.
    • NDA (соглашения о неразглашении).
    • GDPR и другие законодательства о защите данных.

21. Какие новые тренды в защите программного обеспечения наблюдаются сегодня?
Тренды:
    • Облачная защита и онлайн-валидация.
    • Защита на уровне микросервисов и контейнеров.
    • Использование искусственного интеллекта для обнаружения атак.
    • Zero Trust Architecture (ZTA).
    • Обфускация с использованием виртуальных машин.

22. Как развитие технологий влияет на методы защиты программ от реверс-инжиниринга?
Влияние:
    • Увеличение сложности анализа через использование виртуализации и эмуляции.
    • Активное применение шифрования и обфускации.
    • Встраивание антианализ-детекторов.
    • Динамическое изменение кода во время выполнения.

23. Какие уязвимости могут появиться с развитием IoT и AI в программном обеспечении?
Уязвимости:
    • Нехватка обновлений для устройств IoT.
    • Утечки данных через умные устройства.
    • Манипуляции с входными данными ИИ для получения неверных результатов (adversarial attacks).
    • Сложности в контроле автономных решений ИИ.
    • Уязвимости в протоколах связи между устройствами.
